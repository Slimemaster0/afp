#+title: Main
#+PROPERTY: header-args :tangle main.rs

* Table of Contents :toc:
- [[#crates][Crates]]
  - [[#std][std]]
  - [[#colored][Colored]]
  - [[#serde][Serde]]
- [[#stucts][Stucts]]
  - [[#exec][Exec]]
  - [[#os-info][Os info]]
- [[#main-function][Main function]]
  - [[#start-main-function][Start main function]]
  - [[#get-os-info][Get Os info]]
  - [[#display-distro-info-and-version][Display Distro info and version]]
  - [[#load-config][Load Config]]
  - [[#userhost][User@Host]]
  - [[#kernel-info][Kernel info]]
  - [[#end-main-function][End main function]]
- [[#common-functions][Common functions]]
  - [[#trim-new-line][Trim new line]]
  - [[#os-info-1][Os info]]

* Crates
- [[std]]
- [[Colored]]
- [[Serde]]

** std
#+begin_src rust
pub use std::process::Command; // Executing commands
#+end_src

** Colored
#+begin_src rust
use colored::Colorize; // Colors
#+end_src

** Serde
#+begin_src rust
pub use serde::{Deserialize, Serialize};
#+end_src

#+RESULTS:
: error: Could not compile `cargouoR8pQ`.





* Stucts
- [[Exec][Exec]]

** Exec
An object for that stores a command as a *'String'* and the arguments as a *'Vector'*
Useage: let my_exec = Exec { cmd: "command".to_string(), args: vec!["arg1".to_string(), "arg2".to_string(), "arg3".to_string()] };

*** List of functions
- [[Run and get the output][get_output]]

*** Creating the *Exec* Struct
#+begin_src rust
struct Exec {
    cmd: String,
    args: Vec<String>
}

impl Exec {
#+end_src

#+RESULTS:
: error: Could not compile `cargo98ZqjJ`.

*** Run and get the output
A function for *running the command* with the args and *returns the output* as a *String*.
#+begin_src rust
fn get_output(&self) -> String {
    let exec = &self.cmd;
    let mut cmd = Command::new(exec);

    // adding the arguments
    for arg in self.args.iter() {
        cmd.arg(arg);
    }

    match cmd.output() {
        Ok(o) =>  {
            unsafe {
                // Make a string from the output of the command.
                let mut str = String::from_utf8_unchecked(o.stdout);
                // Remove the new line charactor and return the output
                return trim_newline(&mut str);
            }
        },
        Err(e) => {
            println!("Err: {}", e);
            return "N/A".to_string();
        }
    }
}
#+end_src

*** End of *Exec* impl
#+begin_src rust
}
#+end_src

** Os info
*** Creating the *'Osinfo'* Struct
#+begin_src rust
#[derive(Default, Clone, Deserialize)]
#[allow(dead_code)]
struct Osinfo {
    codename: String,
    id: String,
    like: String,
    version: String,
}
#+end_src






* Main function
- [[Get Os Info][Get Os info]]
- [[Load Config][Load The Config file *Not implemented yet* ]]
- [[User@Host][Display the *user@host* line]]
- [[Kernel info][Display the *kernel name and version number* ]]

** Start main function
#+begin_src rust
fn main() {
#+end_src

** Get Os info
#+begin_src rust
let osinfo = get_osinfo();
#+end_src

** Display Distro info and version
#+begin_src rust
println!("{} {} {}", format!("Distro:").blue().bold(), osinfo.id, format!("{}", osinfo.version).green() );
#+end_src

#+RESULTS:
: error: Could not compile `cargoxx2nrN`.


** Load Config
**** Not implemented yet
#+begin_src rust

#+end_src


** User@Host
#+begin_src rust
let user_name = Exec { cmd: "whoami".to_string(), args: vec![] };
let host_name = Exec { cmd: "uname".to_string(), args: vec!["-n".to_string()] };

println!("{}@{}", format!("{}", user_name.get_output()).blue().bold(), format!("{}", host_name.get_output()).green() );
#+end_src


** Kernel info
#+begin_src rust
let knl_name = Exec { cmd: "uname".to_string(), args: vec![] }; // Kernel name
let knl_ver = Exec { cmd: "uname".to_string(), args: vec!["-r".to_string()] }; // Kernel Version

println!("{} {} {}", format!("Kernel:").blue().bold(), knl_name.get_output(), format!("{}", knl_ver.get_output()).green() ); // Print output
#+end_src


** End main function
#+begin_src rust
}
#+end_src




* Common functions
- [[Trim new line][trim_newline]]

** Trim new line
#+begin_src rust
fn trim_newline(s: &mut String) -> String {
    if s.ends_with('\n') {
        s.pop();
        if s.ends_with('\r') {
            s.pop();
        }
    }
    return s.to_string();
}
#+end_src

** Os info
#+begin_src rust
fn get_osinfo() -> Osinfo {
    let info_command = Exec { cmd: "distro".to_string(), args: vec!["-j".to_string()] };

    let info_json_string = info_command.get_output();
    let info_json_str: &str = &info_json_string;

    let osinfo: Osinfo = serde_json::from_str(&info_json_str).expect("Err: could not parse json.");

    return osinfo;
}
#+end_src

#+RESULTS:
: error: Could not compile `cargoZqeOyR`.
